diff --git includes/actions.inc includes/actions.inc
index ed43af4..37b4431 100644
--- includes/actions.inc
+++ includes/actions.inc
@@ -273,7 +273,10 @@ function actions_function_lookup($hash) {
  */
 function actions_synchronize($delete_orphans = FALSE) {
   $actions_in_code = actions_list(TRUE);
-  $actions_in_db = db_query("SELECT aid, callback, label FROM {actions} WHERE parameters = ''")->fetchAllAssoc('callback', PDO::FETCH_ASSOC);
+  $actions_in_db = db_select('actions')
+    ->fields('actions', array('aid', 'callback', 'label'))
+    ->where('LENGTH(parameters) = 0')
+    ->execute()->fetchAllAssoc('callback', PDO::FETCH_ASSOC);
 
   // Go through all the actions provided by modules.
   foreach ($actions_in_code as $callback => $array) {
diff --git includes/session.inc includes/session.inc
index 8f1bcaf..bd43415 100644
--- includes/session.inc
+++ includes/session.inc
@@ -111,7 +111,12 @@ function _drupal_session_read($sid) {
     // Add roles element to $user.
     $user->roles = array();
     $user->roles[DRUPAL_AUTHENTICATED_RID] = 'authenticated user';
-    $user->roles += db_query("SELECT r.rid, r.name FROM {role} r INNER JOIN {users_roles} ur ON ur.rid = r.rid WHERE ur.uid = :uid", array(':uid' => $user->uid))->fetchAllKeyed(0, 1);
+    $query = db_select('role', 'r');
+    $query->join('users_roles', 'ur', 'ur.rid = r.rid');
+    $query->addField('r', 'rid');
+    $query->addField('r', 'name');
+    $query->condition('ur.uid', $user->uid);
+    $user->roles += $query->execute()->fetchAllKeyed(0, 1);
   }
   elseif ($user) {
     // The user is anonymous or blocked. Only preserve two fields from the
diff --git modules/simpletest/tests/database_test.test modules/simpletest/tests/database_test.test
index 6608336..cbdadc0 100644
--- modules/simpletest/tests/database_test.test
+++ modules/simpletest/tests/database_test.test
@@ -2765,7 +2765,7 @@ class DatabaseRegressionTestCase extends DatabaseTestCase {
    * Test the db_table_exists() function.
    */
   function testDBTableExists() {
-    $this->assertIdentical(TRUE, db_table_exists('node'), t('Returns true for existent table.'));
+    $this->assertIdentical(TRUE, db_table_exists('test'), t('Returns true for existent table.'));
     $this->assertIdentical(FALSE, db_table_exists('nosuchtable'), t('Returns false for nonexistent table.'));
   }
 
@@ -2773,16 +2773,16 @@ class DatabaseRegressionTestCase extends DatabaseTestCase {
    * Test the db_field_exists() function.
    */
   function testDBFieldExists() {
-    $this->assertIdentical(TRUE, db_field_exists('node', 'nid'), t('Returns true for existent column.'));
-    $this->assertIdentical(FALSE, db_field_exists('node', 'nosuchcolumn'), t('Returns false for nonexistent column.'));
+    $this->assertIdentical(TRUE, db_field_exists('test', 'id'), t('Returns true for existent column.'));
+    $this->assertIdentical(FALSE, db_field_exists('test', 'nosuchcolumn'), t('Returns false for nonexistent column.'));
   }
 
   /**
    * Test the db_index_exists() function.
    */
   function testDBIndexExists() {
-    $this->assertIdentical(TRUE, db_index_exists('node', 'node_created'), t('Returns true for existent index.'));
-    $this->assertIdentical(FALSE, db_index_exists('node', 'nosuchindex'), t('Returns false for nonexistent index.'));
+    $this->assertIdentical(TRUE, db_index_exists('test', 'ages'), t('Returns true for existent index.'));
+    $this->assertIdentical(FALSE, db_index_exists('test', 'nosuchindex'), t('Returns false for nonexistent index.'));
   }
 }
 
@@ -3040,7 +3040,7 @@ class DatabaseBasicSyntaxTestCase extends DatabaseTestCase {
    * Test for string concatenation.
    */
   function testBasicConcat() {
-    $result = db_query('SELECT CONCAT(:a1, CONCAT(:a2, CONCAT(:a3, CONCAT(:a4, :a5))))', array(
+    $result = db_query('SELECT CONCAT(:a1, CONCAT(:a2, CONCAT(:a3, CONCAT(:a4, :a5)))) FROM {test}', array(
       ':a1' => 'This',
       ':a2' => ' ',
       ':a3' => 'is',
diff --git modules/simpletest/tests/schema.test modules/simpletest/tests/schema.test
index 8945117..c3fad57 100644
--- modules/simpletest/tests/schema.test
+++ modules/simpletest/tests/schema.test
@@ -125,6 +125,7 @@ class SchemaTestCase extends DrupalWebTestCase {
           'mysql_type' => 'timestamp',
           'pgsql_type' => 'timestamp',
           'sqlite_type' => 'datetime',
+          'oci_type' => 'timestamp',
           'not null' => FALSE,
           'default' => NULL,
         ),
